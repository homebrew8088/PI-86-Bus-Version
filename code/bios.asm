;Compile command line

;nasm bios.asm -o bios.bin

[BITS 16]
CPU 8086
ORG 0X0000

DATA_AREA:
TIMES 0X100 DB 0x00 ;I/O DATA AREA 

START:
	CLI
	MOV AX, CS		;SETS STACK SEGMENT TO 0xF000
	MOV SS, AX		;
	MOV SP, 0X7FE0	;0xF000:0XFFE0 = 0XFFFE0
	
	CALL CLEAR_INT_VECTOR_TABLE	;THIS IS NOT NEEDED. BUT IT PUTS ALL ZERO IN INT VECTOR TABLE
								;THIS CAN BE HELPFUL TO SEE WHAT DOS INSTALLS
	CALL LOAD_INT_VECTOR_TABLE	;COPIES INTERRUPT VECTOR TABLE TO ADDRESS 0X0000:0X0000
	CALL LOAD_BIOS_DATA_AREA	;COPIES BIOS DATA TO ADDRESS 0X0000:0X0400
	CALL INITIALIZE_8259		;INTERRUPT CONTROLLER
	CALL INITIALIZE_8253		;TIMER

	CALL MESSAGE_1				;DISPLAYS BIOS MESSAGE	
	
	MOV AX, CS		;SET SEGMENT REGISTERS TO CS
	MOV DS, AX		;
	MOV ES, AX		;
	STI

    JMP BOOT_DRIVE	;ADD TEST CODE HERE WITH OUT BOOTING DISK

BOOT_DRIVE:		
	MOV AX, 0X07C0 	;0X07C0:0X0000
	MOV ES, AX		;ES:BX = ADDRESS BUFFER
	MOV AX, 0X0201	;READ ONE SECTOR
	MOV BX, 0X0000	;ES:BX = ADDRESS BUFFER
	MOV CX, 0X0001	;1 SECTOR
	MOV DX, 0X0000	;DRIVE TO BOOT UP 0=A, 80=C
	INT 0X13		;INT 13
	MOV AX, 0X07C0	;SEGMENT
	MOV DS, AX		;SET DS
	MOV ES, AX		;SET ES
	MOV AX, 0X0000	;ZERO AX
	MOV BX, 0X0000	;ZERO BX
	MOV CX, 0X0000	;ZERO CX
	MOV DX, 0X0000	;ZERO DX
	JMP 0X07C0:0X0000	;JMP FAR 0X07C0:0X0000

CLEAR_INT_VECTOR_TABLE:
	MOV AX, 0X0000
	MOV DS, AX
	MOV BX, 0X0000
	MOV CX, 0X0400 
	MOV AX, 0X0000
  .LOOP_CLVT:
	MOV BYTE [BX], AL
	ADD BX, 0X0001
	LOOP .LOOP_CLVT
	RET	
	
LOAD_INT_VECTOR_TABLE:
	CLD
	MOV AX, 0X0000
	MOV ES, AX
	MOV DI, 0X0000
	MOV AX, CS
	MOV DS, AX
	MOV SI, INT_VECTOR_TABLE
	MOV CX, INT_VECTOR_TABLE.END - INT_VECTOR_TABLE
	REP MOVSB
	RET

LOAD_BIOS_DATA_AREA:
	MOV AX, 0X0040
	MOV ES, AX
	MOV DI, 0X0000
	MOV AX, CS
	MOV DS, AX
	MOV SI, BIOS_DATA_AREA
	MOV CX, BIOS_DATA_AREA.END - BIOS_DATA_AREA
	REP MOVSB
	RET
	
MESSAGE_1:
	MOV AX, 0X0002
	INT 0X10
	
	MOV AX, CS
	MOV DS, AX
	MOV AH, 0X0E
	MOV CX, .END - .MESSAGE
	MOV BX, .MESSAGE	
	.LOOP:
	MOV AL, [BX]
	INT 0X10
	INC BX
	LOOP .LOOP
	RET
	.MESSAGE:
	DB 'BIOS 1.1 Devloped by Elijah Miller 2020', 0X0D, 0X0A
	DB 'V20 CPU', 0X0D, 0X0A	
	DB '1MB RAM, 64K IO Ports, VGA Graphics', 0X0D, 0X0A
	DB 'bios.bin loaded at 0xF800:0x0000', 0X0D, 0X0A
	DB 'Booting', 0X0D, 0X0A, 0X0A
	.END:
	

INITIALIZE_8259:
	PUSH AX

	MOV AL, 0X13		;ICW1
	OUT 0X20, AL
	MOV AL, 0X08		;ICW2
	OUT 0X21, AL
	MOV AL, 0X09		;ICW4
	OUT 0X21, AL

	MOV AL, 0XFE		;OCW1
	OUT 0X21, AL		;UNMASK 
	POP AX
	RET

INITIALIZE_8253:

	PUSH AX
	PUSH CX

	MOV AL, 0X36 		;00110110b  
			;CHANNEL 0
			;WRITE LOW BYTE THEN HIGH BYTE
			;MODE 3 
			;16 BIT COUNTER 
			
	OUT 0X43, AL		;CONTROL REG

	MOV CX, 0XFFFF		;COUNT 

	MOV AL, CL		;WRITE LOW BYTE OF COUNT
	OUT 0X40, AL		;PORT 0X40
			;INTERNAL FLIP-FLOP INC
	MOV AL, CH		;WRITE HIGH BYTE OF COUNT 
	OUT 0X40, AL		;PORT 040

	;;;;;;;;;;;
	;TEST TONE
	;;;;;;;;;;;
	MOV AL, 0X03		;ENABLE SPK AND TIMMER 2 'GO'
	OUT 0X61, AL		;PORT 0X61 CONTROL PORT
	MOV AL, 0XB6
	OUT 0X43, AL
	MOV AL, 0X00
	OUT 0X42, AL
	MOV AL, 0X05
	OUT 0X42, AL

	POP CX
	POP AX

	RET	


BIOS_DATA_AREA:
	;0x0400 (4 words)	IO ports for COM1-COM4 serial (each address is 1 word, zero if none)
	DW 0X0000
	DW 0X0000
	DW 0X0000
	DW 0X0000
	;0x0408 (4 words)	IO ports for LPT1-LPT4 parallel (each address is 1 word, zero if none)
	DW 0X0000
	DW 0X0000
	DW 0X0000
	DW 0X0000	;!!
	;0x0410 (word)		(Equip Flag) packed bit flags for detected hardware
	;look up number google, right now one floppy drive, 80x25 color, no coprocessor
	DW 0X02D
	;0x0412	 (byte)		MFG test
	DB 0x01
	;0x0413 (word)		Memory Size
	DW 0x0280			;280 640K, 
	;0x0415 (word)		IO Ram Size
	DW 0x0000
	;0x0417 (byte)		keyboard state flag 0
	DB 0X00
	;0x0418 (byte)		keyboard state flag 1
	DB 0X00	
	;0x0419 (byte)		ALT_INPUT
	DB 0X00	
	;0x041A (word) 		keyboard head 
	DW 0x001E
	;0x041C (word)		keyboard tail
	DW 0x001E 
	;0x041E (32 bytes)	keyboard buffer
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	;0x043E 		DISKETTE DATA AREAS
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00
	;0x0449 (byte)		Display Mode [VIDEO DISPLAY DATA AREA]
	DB 0X03				;80x25  8x8   640x200   16 Colors 0xB800 CGA
	;0x044A (word)		number of columns in text mode
	DW 0X0050
	;0X044C (word)
	DW 0X0000
	;0X044E (word)
	DW 0X0000	
	;0X0450 (16 BYTE AS WORD)	:CURSOR_POSN 8 PAGES   col, row
	DW 0X0000, 0X0000
	DW 0X0000, 0X0000
	DW 0X0000, 0X0000
	DW 0X0000, 0X0000
	;0X0460 (word)		Cursor Mode
	DW 0X0000
	;0x0462			Active Page
	DB 0X00
	;0x0463 (2 bytes, taken as a word)	base IO port for video
	DB 0X00
	DB 0X00
	;0x0465	(byte)
	DB 0x00
	;0x0466	(byte)
	DB 0x00
	;0x0467	(word)
	DW 0x0000
	;0x0469	(word)
	DW 0x0000
	;0x046B	(byte)
	DB 0x00
	;0x046C (word)		# of IRQ0 timer ticks since boot
	DW 0X0000
	
	;LATER 0x046E
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00
	;
	
	;0x0475 (byte)		# of hard disk drives detected
	DB 0X00
	
	;LATER 0x0476
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00
	;
	
	;0x0480 (word)		keyboard buffer start
	DW 0X001E
	;0x0482 (word)		keyboard buffer end
	DW 0X003E
	
	;LATER 0x0484
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00, 0X00
	DB 0X00, 0X00, 0X00
	
	;0x0497 (byte)		last keyboard LED/Shift key state
	DB 0X00	

.END:
INT_VECTOR_TABLE:
	DW INT00, 0xF800
	DW INT01, 0xF800
	DW INT02, 0xF800
	DW INT03, 0xF800
	DW INT04, 0xF800
	DW INT05, 0xF800
	DW INT06, 0xF800
	DW INT07, 0xF800
	DW INT08, 0xF800
	DW INT09, 0xF800
	DW INT0A, 0xF800
	DW INT0B, 0xF800
	DW INT0C, 0xF800
	DW INT0D, 0xF800
	DW INT0E, 0xF800
	DW INT0F, 0xF800
	DW INT10, 0xF800
	DW INT11, 0xF800
	DW INT12, 0xF800
	DW INT13, 0xF800
	DW INT14, 0xF800
	DW INT15, 0xF800
	DW INT16, 0xF800
	DW INT17, 0xF800
	DW INT18, 0xF800
	DW INT19, 0xF800
	DW INT1A, 0xF800
	DW INT1B, 0xF800
	DW INT1C, 0xF800
	DW INT1D, 0xF800
	DW INT1E, 0xF800
	DW INT1F, 0xF800
   .END:

INT00: ;Divide by Zero
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT01: ;Single Step
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT02: ;Nonmaskable 
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '2'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT03: ;Breakpoint
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '3'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT04: ;Overflow
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '4'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT05: ;Print Screen
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '5'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT06: ;Reserved
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '6'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT07: ;Reserved
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '7'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	;HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT08: ;Reserved
	;PUSH AX
	;MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	;MOV AL, 'I'		;SET AL TO CHAR	
	;INT 0X10		;CALL INTERRUPT 0X10
	;MOV AL, '0'		;SET AL TO CHAR	
	;INT 0X10		;CALL INTERRUPT 0X10
	;MOV AL, '8'		;SET AL TO CHAR
	;INT 0X10		;CALL INTERRUPT 0X10
	;POP AX
	CLI
	PUSH AX			;STORE AX
	PUSH BX			;STORE BX
	PUSH DS			;STORE DS
	MOV AX, 0X0040			;BIOS DATA AREA
	MOV DS, AX			;SET DATA SEGMENT 
	MOV BX, 0X006C			;SET BX TO TICK COUNTER
	add WORD [BX], 25			;INC LOWER WORD TICK BY ONE
	CMP WORD [BX], 0X0000			;CMP TO 0 TO SEE IF ROLLED OVER 	
	JNZ .END_INT08			;IF NOT END
	ADD BX, 0X0002			;ADD 2 TO BX FOR NEXT WORD
	INC WORD [BX]			;INC UPPER WORD
  .END_INT08:				;END LABEL
	POP DS			;RESTORE DS
	POP BX			;RESTORE BX
    	MOV AL, 0x20
    	OUT 0x20, AL	
	POP AX			;RESTORE AX
	STI
	IRET			;RETURN FROM INTERRUPT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INT 0X09	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DB 'INT 0X09'
%INCLUDE "asm/int09.asm"

INT0A: ;Reserved
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'A'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	STI
	IRET			;RETURN FROM INTERRUPT	
INT0B: ;Communications
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'B'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	STI
	IRET			;RETURN FROM INTERRUPT		
INT0C: ;Communications
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'C'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	STI
	IRET			;RETURN FROM INTERRUPT			
INT0D: ;Disk
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'D'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	STI
	IRET			;RETURN FROM INTERRUPT
INT0E: ;Diskette
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'E'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	STI
	IRET			;RETURN FROM INTERRUPT
INT0F: ;Printer
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'F'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	STI
	IRET			;RETURN FROM INTERRUPT
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INT 0X10	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DB 'INT 0X10'
%INCLUDE "asm/int10.asm"

INT11: ;Equipment Check	
	CLI							;CLEAR INTERRUPS FLAG
	PUSH DS						;STORE DS
	PUSH BX						;STORE BX
	MOV AX, 0X0040				;BIOS DATA AREA
	MOV DS, AX					;SET DATA SEGMENT
	MOV BX, 0X0010				;OFFSET 0X10 EQUIPMENT LIST
	MOV AX, WORD [BX]			;STORE EQUPMENT LIST AX
	POP BX						;RESTORE BX
	POP DS						;RESTORE DS
	STI							;SET INTERRUPS FLAG
	IRET						;RETRUN
INT12: ;Memory	
	CLI							;CLEAR INTERRUPS FLAG
	PUSH DS						;STORE DS
	PUSH BX						;STORE BX
	MOV AX, 0X0040				;BIOS DATA AREA
	MOV DS, AX					;SET DATA SEGMENT
	MOV BX, 0X0013				;OFFSET 0X13 FOR MEMORY SIZE
	MOV AX, WORD [BX]			;STORE MEMORY SIZE AX
	POP BX						;RESTORE BX
	POP DS						;RESTORE DS
	STI							;SET INTERRUPS FLAG
	IRET						;RETRUN
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;INT 0X13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
%INCLUDE "asm/int13.asm"
	
INT14: ;Communications
	IRET
INT15: ;Cassette
	CLI							;CLEAR INTERRUPT FLAG
	MOV AL, 0X00				;AL = 0X00
	MOV AH, 0X86				;NO CASSETTE PRESENT
	STC							;NOT BIOS SUPPORTED
								;THIS IS HOW I RETURN THE CARRY FLAG
	PUSH AX						;STORE AX
	PUSHF						;STORE FLAGS
	POP AX						;GET AX = FLAGS
	PUSH BP						;STORE BP
	MOV BP, SP              	;Copy SP to BP for use as index
	ADD BP, 0X08				;offset 8
	AND WORD [BP], 0XFFFE		;CLEAR CF = ZER0
	AND AX, 0X0001				;ONLY CF 
	OR	WORD [BP], AX			;SET CF AX
	POP BP               		;RESTORE BASE POINTER
	POP AX						;RESTORE AX	
	STI							;SET INTERRUPS FLAG
	IRET						;RETRUN		
INT16: ;Keyboard

	CLI
  	CMP AH, 0X00			;Check ah 
	JZ .WAIT_FOR_KEY		;ah=0
	CMP AH, 0X01					
	JZ .CHECK_ZERO_FLAG		;ah=1
	CMP AH, 0X02					
	JZ .GET_SHIFT_FLAGS		;ah=2
	STI
	IRET

  .WAIT_FOR_KEY:
	PUSH BX
	PUSH DS
  .WAIT_FOR_KEY_LOOP:
	STI
	MOV AX, 0X0040
	MOV DS, AX
	CLI
	MOV BX, [0X001A]		;Tail
	CMP BX, [0X001C]		;Head
	JZ .WAIT_FOR_KEY_LOOP
	MOV AX, [BX]
	ADD BX, 0X0002			;Mov bx forward through buffer
	CMP BX, [0X0082]		;Check to see if at the end
	JB .NOT_END_OF_BUFFER	;Jump oveR next step if not at the end
	MOV BX, [0X0080]		;Set bx back to begining 
	.NOT_END_OF_BUFFER:
	MOV [0X001A], BX	
	POP DS
	POP BX
	CMP AL, 0XE0
	JZ .AL_0
	STI
	IRET
	
  .AL_0:
	MOV AL, 0x00
    STI
	IRET

  .CHECK_ZERO_FLAG:	
  	PUSH BX				
	PUSH DS
	MOV AX, 0X0040
	MOV DS, AX

	MOV BX, [0X001A]		;Tail
	CMP BX, [0X001C]		;Head
	MOV AX, [BX]
	POP DS
	POP BX
	
	PUSH AX						;STORE AX
	PUSHF						;STORE FLAGES
	POP AX						;AX = FLAGS
    PUSH BP						;STORE BP
	MOV BP, SP              	;Copy SP to BP for use as index
	ADD BP, 0X08				;offset 8
	AND WORD [BP], 0XFFBF		;CLEAR ZF
	AND AX, 0X0040				;ONLY ZF
	OR	WORD [BP], AX			;SET ZF
	POP BP               		;RESTORE BASE POINTER
	POP AX						;RESTORE AX
	STI
	IRET
	
  .GET_SHIFT_FLAGS:	  
	MOV AX, 0X0000				;FOR NOW RETURNS NOTHING. 
	STI
	IRET
	
INT17: ;Printer	
	IRET
INT18: ;Resident Basic
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '8'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT19: ;Bootstrap
	JMP 0XFFFF:0X0000	;JUMPS TO BOOT CODE
INT1A: ;Time of Day
	
	CLI
	PUSH CX
	MOV CX, 80
INT8LOOP:
	;INT 0X08
	LOOP INT8LOOP
	POP CX
	PUSH AX
	;MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	;MOV AL, 'I'		;SET AL TO CHAR	
	;INT 0X10		;CALL INTERRUPT 0X10
	;MOV AL, '1'		;SET AL TO CHAR	
	;INT 0X10		;CALL INTERRUPT 0X10
	;MOV AL, 'A'		;SET AL TO CHAR
	;INT 0X10		;CALL INTERRUPT 0X10
	POP AX
	PUSH DS
  	PUSH BX
	MOV AX, 0X0040		;BIOS DATA AREA
	MOV DS, AX			;SET DS
	MOV BX, 0X006C		;NUMBER OF CLICKS
	MOV DX, WORD [BX]	;SET DX CLICKS
	ADD BX, 0X0002
	MOV CX, WORD [BX]	;0X006E
	AND CX, 0x000F
	MOV AX, 0X0000		;
	POP BX
	POP DS
	STI
	IRET
INT1B: ;Keyboard Break
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'B'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT1C: ;Timer Tick
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'C'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT1D: ;Video Initialization 
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'D'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT1E: ;Diskette Parameters
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'E'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT
INT1F: ;Video Graphics Characters
	CLI
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'F'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	HLT				;HLT PROCESSOR NOT SUPPORTED INTERRUPT
	IRET			;RETURN FROM INTERRUPT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	PUSH AX
	MOV AH, 0X0E	;SET AH 0X0E FOR TELOTYPE
	MOV AL, 0X0D		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 0X0A	;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, 'I'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '1'		;SET AL TO CHAR	
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, '0'		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	MOV AL, ' '		;SET AL TO CHAR
	INT 0X10		;CALL INTERRUPT 0X10
	POP AX
	CALL DUMP_REGISTERS	
		
DUMP_REGISTERS:	
	PUSH AX
	PUSH DX
	PUSH CX
	PUSH BX
	PUSH AX	
	
	MOV AH, 0X0E
	MOV AL, ' '
	INT 0X10
	MOV AL, 'A'
	INT 0X10
	MOV AL, 'X'	
	INT 0X10
	MOV AL, '='
	INT 0X10	
	POP AX
	PUSH AX
	MOV AL, AH
	CALL WIRTE_AL_INT10_E
	POP AX
	CALL WIRTE_AL_INT10_E
	
	MOV AH, 0X0E
	MOV AL, ' '
	INT 0X10
	MOV AL, 'B'
	INT 0X10
	MOV AL, 'X'	
	INT 0X10
	MOV AL, '='
	INT 0X10	
	POP AX
	PUSH AX
	MOV AL, AH
	CALL WIRTE_AL_INT10_E
	POP AX
	CALL WIRTE_AL_INT10_E
	
	MOV AH, 0X0E
	MOV AL, ' '
	INT 0X10
	MOV AL, 'C'
	INT 0X10
	MOV AL, 'X'	
	INT 0X10
	MOV AL, '='
	INT 0X10	
	POP AX
	PUSH AX
	MOV AL, AH
	CALL WIRTE_AL_INT10_E
	POP AX
	CALL WIRTE_AL_INT10_E
	
	MOV AH, 0X0E
	MOV AL, ' '
	INT 0X10
	MOV AL, 'D'
	INT 0X10
	MOV AL, 'X'	
	INT 0X10
	MOV AL, '='
	INT 0X10	
	POP AX
	PUSH AX
	MOV AL, AH
	CALL WIRTE_AL_INT10_E
	POP AX
	CALL WIRTE_AL_INT10_E
	
	MOV AH, 0X0E
	MOV AL, 0X0D
	INT 0X10
	
	POP AX
	RET
;;;;;;;;;;;;;;;;;;;;;;;
;WRITE TO SCREEN;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;
WIRTE_AL_INT10_E:

	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	MOV BL, AL

	MOV DH, AL
	MOV CL, 0X04
	SHR DH, CL

	MOV AL, DH
	AND AL, 0X0F
	CMP AL, 0X09
	JA LETTER_HIGH

	ADD AL, 0X30
	JMP PRINT_VALUE_HIGH

	LETTER_HIGH:
	ADD AL, 0X37

	PRINT_VALUE_HIGH:
	MOV AH, 0X0E
	INT 0X10

	MOV AL, BL
	AND AL, 0X0F
	CMP AL, 0X09
	JA LETTER_LOW

	ADD AL, 0X30
	JMP PRINT_VALUE_LOW

	LETTER_LOW:
	ADD AL, 0X37

	PRINT_VALUE_LOW:
	MOV AH, 0X0E
	INT 0X10

	POP DX
	POP CX
	POP BX
	POP AX

	RET

%INCLUDE "asm/keycodes.asm"	
DB 'END OF BIOS FILE'
